---
title: "Missing covariate imputation"
execute: 
  freeze: true
knitr:
  opts_chunk: 
    message: false
---

```{r}
#| purl: false
#| include: false
knitr::purl(input = "missing_covariate_imputation.qmd", 
            output = "R/missing_covariate_imputation.R")
```

In this example, we use the `nhanes2` data set from the `mice` R-package to illustrate how to do missing covariate imputation in INLA by using a measurement error model.
As noted in the paper, the `nhanes2` data set is really small, it only has 25 observations and 9 of them are missing, so this is not really a good application of this. However, we chose to use this as it is a data set that is commonly used in other missing data applications in INLA, and so we reasoned that using the same data set would make it easier to compare the implementations.

## Loading packages

```{r}
#| message: false
library(mice)       # Just used for the nhanes2 data set
library(INLA)       # INLA modelling
library(dplyr)      # Data wrangling of the results
library(gt)         # Tables
library(tidyverse)  # Data wrangling and plotting
library(showtext)   # Font
library(colorspace) # Color adjustments
library(MCMCpack)   # dinvgamma()
```

```{r}
inla.setOption(num.threads = "1:1")
```

## Loading and preparing the data

```{r}
# Using the nhanes data set found in mice so we can compare to mice:
data(nhanes2)

head(nhanes2)

n <- nrow(nhanes2)

# Manually dummy-code age:
age2 <- ifelse(nhanes2$age == "40-59", 1, 0)
age3 <- ifelse(nhanes2$age == "60-99", 1, 0)

# Center the response and continuous covariates
chl <- scale(nhanes2$chl, scale = FALSE)[,1]
bmi <- scale(nhanes2$bmi, scale = FALSE)[,1]
```

## Modelling

We want to fit the model

$$
chl \sim \beta_0 + \beta_{age2} age_2 + \beta_{age3} age_3 + \beta_{bmi} bmi
$$

### Specifying priors

```{r}
# Priors for model of interest coefficients
prior.beta = c(0, 1e-6) # Gaussian, c(mean, precision)

# Priors for exposure model coefficients
prior.alpha <- c(0, 1e-6) # Gaussian, c(mean, precision)

# Priors for y, measurement error and true x-value precision
# Start by getting a reasonable prior guess for the standard error of the regression and exp. models
summary(lm(chl~bmi+age2+age3))$sigma
summary(lm(bmi~age2+age3))$sigma

# Use those values to create reasonable priors:
prior.prec.y <- c(2.5-1,(2.5)*29.1^2) # Gamma
prior.prec.u_c <- c(0.5, 0.5) # Gamma
prior.prec.x <- c(2.5-1,(2.5)*4.2^2) # Gamma

# We can visualize these priors:
#curve(dinvgamma(x, 2.5-1,(2.5)*29.1^2), 0, 2000)
#abline(v=29.1^2)

#curve(dinvgamma(x,2.5-1,(2.5)*4.1^2), 0, 50)
#abline(v=4.2^2)

# Initial values
prec.y <- 1/29.1^2
prec.u_c <- 1
prec.x <- 1/4.2^2
```


### Setting up the matrices for the joint model

```{r}
Y <- matrix(NA, 3*n, 3)


Y[1:n, 1] <- chl             # Regression model of interest response
Y[n+(1:n), 2] <- bmi         # Error model response
Y[2*n+(1:n), 3] <- rep(0, n) # Exposure model response

beta.0 <- c(rep(1, n), rep(NA, n), rep(NA, n))
beta.bmi <- c(1:n, rep(NA, n), rep(NA, n))
beta.age2 <- c(age2, rep(NA, n), rep(NA, n))
beta.age3 <- c(age3, rep(NA, n), rep(NA, n))

id.x <- c(rep(NA, n), 1:n, 1:n) 
weight.x <- c(rep(1, n), rep(1, n), rep(-1, n))

alpha.0 <- c(rep(NA, n), rep(NA, n), rep(1, n))
alpha.age2 <- c(rep(NA, n), rep(NA, n), age2)
alpha.age3 <- c(rep(NA, n), rep(NA, n), age3)

dd <- data.frame(Y = Y, 
                 beta.0 = beta.0,
                 beta.bmi = beta.bmi,
                 beta.age2 = beta.age2,
                 beta.age3 = beta.age3,
                 id.x = id.x,
                 weight.x = weight.x,
                 alpha.0 = alpha.0,
                 alpha.age2 = alpha.age2,
                 alpha.age3 = alpha.age3)
```

### INLA formula
```{r}
formula = Y ~ - 1 + beta.0 + beta.age2 + beta.age3 + 
  f(beta.bmi, copy="id.x", 
    hyper = list(beta = list(param = prior.beta, fixed=FALSE))) +
  f(id.x, weight.x, model="iid", values = 1:n, 
    hyper = list(prec = list(initial = -15, fixed=TRUE))) +
  alpha.0 + alpha.age2 + alpha.age3
```

### Scaling of ME precision

Since we are not assuming any measurement error here, we need to "turn off" the error model by scaling the error precision to be very large (it makes no difference if we scale the precision only for the observed values or for the observed and missing values).
```{r}
Scale <- c(rep(1, n), rep(10^12, n), rep(1, n))
```

### Fitting the model
```{r}
model_missing <- inla(formula, data = dd, scale = Scale,
                     family = c("gaussian", "gaussian", "gaussian"),
                     control.family = list(
                       list(hyper = list(prec = list(initial = log(prec.y), 
                                                     param = prior.prec.y, 
                                                     fixed = FALSE))),
                       list(hyper = list(prec = list(initial = log(prec.u_c), 
                                                     param = prior.prec.u_c, 
                                                     fixed = TRUE))),
                       list(hyper = list(prec = list(initial = log(prec.x), 
                                                     param = prior.prec.x, 
                                                     fixed = FALSE)))
                     ),
                     control.fixed = list(
                       mean = list(beta.0 = prior.beta[1], 
                                   beta.age2 = prior.beta[1], 
                                   beta.age3 = prior.beta[1],  
                                   alpha.0 = prior.alpha[1], 
                                   alpha.age2 = prior.alpha[1],
                                   alpha.age3 = prior.alpha[1]), 
                       prec = list(beta.0 = prior.beta[2], 
                                   beta.age2 = prior.beta[2], 
                                   beta.age3 = prior.beta[2],  
                                   alpha.0 = prior.alpha[2], 
                                   alpha.age2 = prior.alpha[2],
                                   alpha.age3 = prior.alpha[2])),
                     verbose=F)
```


```{r}
#| purl: false
# Save results:
saveRDS(model_missing, file = "results/model_missing.rds")
```

### Fitting a complete case model

```{r}
#| purl: false
# Where is bmi missing? 
missing_bmi <- is.na(bmi)

dd_naive <- data.frame(Y = chl, 
                       beta.0 = rep(1, length(bmi)),
                       beta.bmi = bmi, 
                       beta.age2 = age2, 
                       beta.age3 = age3)[!missing_bmi, ]


# Formula
formula <- Y ~ - 1 + beta.0 + beta.age2 + beta.age3 + beta.bmi

# Fit model
model_naive <- inla(formula,
              data = dd_naive,
              family = c("gaussian"),
              control.family = list(
                list(hyper = list(prec = list(initial = prec.y, 
                                              param = prior.prec.y, 
                                              fixed = FALSE)))),
              control.fixed = list(
                       mean = list(beta.0 = prior.beta[1], 
                                   beta.age2 = prior.beta[1], 
                                   beta.age3 = prior.beta[1],
                                   beta.bmi = prior.beta[1]), 
                       prec = list(beta.0 = prior.beta[2], 
                                   beta.age2 = prior.beta[2], 
                                   beta.age3 = prior.beta[2],  
                                   beta.bmi = prior.beta[2])),
)
```



## Results

The posterior means and standard deviations are presented in the table below. Note that the data set is quite small (25 observations where 9 are missing), and so the differing result should not be interpreted too seriously.

```{r}
#| echo: false
#| purl: false
return_estimates <- function(inla.object){
  fixed <- data.frame(inla.object$summary.fixed)
  fixed <- fixed[, names(fixed) != "kld"]
  fixed$coefficient.name <- rownames(fixed)
  hyperpar <- data.frame(inla.object$summary.hyperpar)
  hyperpar$coefficient.name <- rownames(hyperpar)

  # Extract all coefficients that contain "beta" (the coefficients of the model of interest)
  betas <- rbind(dplyr::filter(fixed, grepl("beta", coefficient.name)),
                 dplyr::filter(hyperpar, grepl("beta", coefficient.name)))
  # Extract all coefficients that contain "alpha" (the coefficients of the imputation model)
  alphas <- dplyr::filter(fixed, grepl("alpha", coefficient.name))
  
  # All coefficients
  all_coefs <- dplyr::bind_rows("Imputation model" = alphas, 
                                "Model of interest" = betas, 
                                .id = "model")
  
  return(all_coefs)
}
```

```{r}
#| echo: false
#| eval: false
#| purl: false
return_estimates(model_missing) %>% 
  dplyr::select(coefficient.name, mean, sd, model) %>% 
  arrange(desc(model)) %>% # Arrange so the MOI coefs are at the top
  group_by(model) %>% # Group by model type
  gt(rowname_col = "coefficient.name")
```


```{r}
#| echo: false
#| purl: false
inla_mcmc_results <- tibble::tribble(
  ~coefficient.name, ~model,              ~inla_mcmc.mean, ~inla_mcmc.sd,
  "beta.0",          "Model of interest", 43.469, 62.603,
  "Beta for beta.bmi", "Model of interest", 4.864, 2.206, 
  "beta.age2",         "Model of interest", 29.501, 17.871, 
  "beta.age3",         "Model of interest", 49.449, 23.207
)

naive_results <- return_estimates(model_naive) |> 
  dplyr::select(coefficient.name, mean, sd, model) %>% 
  rename(naive.mean = mean, naive.sd = sd)
naive_results$coefficient.name[4] <- "Beta for beta.bmi"

return_estimates(model_missing) %>% 
  dplyr::select(coefficient.name, mean, sd, model) %>% 
  rename(me_adjusted.mean = mean, me_adjusted.sd = sd) %>%
  full_join(naive_results, by = c("coefficient.name", "model")) %>% 
  full_join(inla_mcmc_results, by = c("coefficient.name", "model")) %>% 
  mutate_if(is.numeric, round, digits = 3) %>% 
  arrange(desc(model)) %>% # Arrange so the MOI coefs are at the top
  group_by(model) %>% # Group by model type
  gt(rowname_col = "coefficient.name") %>% 
  tab_spanner_delim(
    delim = "."
  )
```

```{r}
#| echo: false
# https://stefvanbuuren.name/RECAPworkshop/Practicals/RECAP_Practical_II.html 
```



```{r}
#| purl: false
#| fig.showtext: true
#| warning: false
#| echo: false
me_plot <- return_estimates(model_missing) %>% 
  dplyr::select(coefficient.name, mean, sd, model) 
naive_plot <- naive_results %>% rename(sd = naive.sd, mean = naive.mean)
inla_mcmc_plot <- inla_mcmc_results %>% rename(sd = inla_mcmc.sd, mean = inla_mcmc.mean)

all_models_for_plot <- bind_rows("me" = me_plot, 
                                 "naive" = naive_plot, 
                                 "inla_mcmc" = inla_mcmc_plot, 
                                 .id = "model") %>% 
  mutate(coef_name = recode_factor(coefficient.name, "Beta for beta.bmi" = "beta.bmi")) %>%
  tidyr::separate(coef_name, c("sub_model", "coef_name")) %>% 
  mutate(coef_pretty = paste0(sub_model, "[", coef_name, "]")) %>% 
  mutate(model = recode(model, "me" = "ME model", "naive" = "Complete case analysis", "inla_mcmc" = "Goméz-Rubio & Rue (2018)")) %>% 
  mutate(coef_pretty = fct_relevel(coef_pretty, levels = c("beta[0]", "beta[age2]", "beta[age3]", "beta[bmi]", "alpha[0]", "alpha[age2]", "alpha[age3]")))


# Colors
col_bgr <- "white" #"#fbf9f4"
col_text <- "#191919"

# Loading fonts
f1 <- "Open Sans"
f2 <- "Open Sans"
font_add_google(name = f1, family = f1)
font_add_google(name = f2, family = f2)

# Plot theme
theme_model_summary <- theme_minimal(base_size = 18, base_family = "Open Sans") + 
  theme(
  axis.title.y = element_blank(),
  axis.title.x = element_text(size = 12),
  axis.text = element_text(size = 10, color = col_text),
  #axis.text.x = element_blank(),
  axis.ticks = element_blank(),
  legend.title = element_blank(),
  legend.text = element_text(size = 10),
  panel.background = element_rect(fill = col_bgr, color = col_bgr),
  #plot.background = element_rect(fill = col_bgr, color = "grey75", size = 1),
  legend.position = "none",
  strip.placement = "outside",
  strip.text = element_text(color = col_text),
  panel.grid.major.y = element_blank(),
  panel.grid.minor = element_blank(),
  plot.title.position = "plot",
  axis.line.x = element_line(size = 1, color = "grey65"),
  plot.margin = margin(rep(15, 4))
)

ggplot(all_models_for_plot, aes(y = model)) +
  geom_linerange(aes(xmin = mean-sd, xmax = mean+sd, color = model), size = 1) +
  geom_point(aes(x = mean, color = model), size = 3) +
  geom_text(aes(x = mean, y = model, label = round(mean, 2)), 
            vjust = -1, family = "Open Sans") +
  #scale_x_continuous(limits = c(-30, 90), breaks = seq(-30, 90, by = 30)) +
  scale_color_manual(values = darken(ggthemes::canva_palettes$"Subtle and versatile"[c(3, 1, 4)], 0.4), 
                     guide = guide_legend(override.aes = list(size = 2, alpha = 1))) +
  facet_wrap(vars(coef_pretty), nrow = 2,
             labeller = label_parsed, scales = "free_x"
             ) +
  labs(x = "Posterior mean") +
  coord_cartesian(clip = "off") +
  theme_model_summary
```

```{r}
#| purl: false
#| echo: false
ggsave("../PhDEmma/PaperA_ME_and_missing_data/figures/missing_figure.png", width = 7, height = 5)
```

### Model summary

```{r}
summary(model_missing)
```


