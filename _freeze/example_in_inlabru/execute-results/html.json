{
  "hash": "3d512ea6afa3f0e86510b943570ab3bc",
  "result": {
    "markdown": "---\ntitle: \"Example in `inlabru`\"\nexecute: \n  freeze: true\nknitr:\n  opts_chunk: \n    message: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(INLA)\nlibrary(inlabru)\n```\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\nWe here show how to fit the measurement error and missing data model in `inlabru`. The `inlabru` code is written by Sara Martino, and commented by Emma Skarstein.\nTODO: the model is still using the random effect formulation and the exposure model uses x, this needs to be updated.\n\n## Loading the data\nFor this demonstration we will use the simulated data from the [Simulation example](simulation_example.qmd). Just to refresh: this is a situation where we have one covariate ($\\boldsymbol{x}$) that has both classical  error, Berkson error and missing data. We also observe another covariate ($\\boldsymbol{z}$) that has no error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"data/simulated_data.csv\")\nn <- nrow(data)\n```\n:::\n\n\n## Priors\nWe use the exact same priors as in the original simulation study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Priors for model of interest coefficients\nprior.beta = c(0, 1/1000) # N(0, 10^3)\n\n# Priors for exposure model coefficients\nprior.alpha <- c(0, 1/10000) # N(0, 10^4) \n\n# Priors for y, measurement error and true x-value precision\nprior.prec.y <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.u_b <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.u_c <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.r <- c(0.5, 0.5) # Gamma(0.5, 0.5) \n\n# Initial values\nprec.y <- 1\nprec.u_b <- 1\nprec.u_c <- 1\nprec.r <- 1\n\nprec.x <- 1\nprior.prec.x <- c(0.5, 0.5)\n```\n:::\n\n\n## Updated version\n(the original code from Sara is for now unchanged in the next sections)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Regression model of interest \ndata_moi <- data.frame(y = data$y, z = data$z, weight.x = 1, weight.r = 1, r = 1:n) \n# Berkson ME model\ndata_berkson <- data.frame(zero = 0, weight.x = 1, weight.r = -1, r = 1:n) \n# Classical ME model\ndata_classical <- data.frame(w = data$w, weight.x = 1, weight.r = 1, r = 1:n)\n# Imputation model\ndata_imputation <- data.frame(zero = 0, z = data$z, weight.x = 1, weight.r = -1, r = 1:n)\n\ncmp_new = ~ Intercept(1, model = \"linear\", prec.linear = prior.beta[2]) +\n  beta_z(main = z, model = \"linear\", prec.linear = prior.beta[2]) +\n  x_eff(r, weight.x, model = \"iid\",  hyper = list(prec = list(initial = -15, fixed=TRUE))) +\n  x_eff_copy(r, copy=\"r_eff\", hyper = list(beta = list(param = prior.beta, fixed=FALSE))) +\n  r_eff(r, weight.r, model = \"iid\",  hyper = list(prec = list(initial = -15, fixed=TRUE))) +\n  alpha_0(main = 1, model = \"linear\", prec.linear = prior.alpha[2]) +\n  alpha_z(main = z, model = \"linear\", prec.linear = prior.alpha[2])\n\n\nlik_moi <- like(formula = y ~ Intercept + beta_z + x_eff_copy,\n                family = \"gaussian\",\n                include = c(\"Intercept\", \"beta_z\", \"x_eff_copy\"),\n                control.family = list(\n                  hyper = list(prec = list(initial = log(prec.y), \n                                           param = prior.prec.y, \n                                           fixed = FALSE))),\n            data = data_moi)\n\nlik_berkson <- like(formula = zero ~ x_eff + r_eff,\n                    family = \"gaussian\",\n                    include = c(\"x_eff\", \"r_eff\"),\n                    control.family = list(\n                      hyper = list(prec = list(initial = log(prec.u_b),\n                                               param = prior.prec.u_b,\n                                               fixed = FALSE))),\n                    data = data_berkson)\n\nlik_classical <- like(formula = w ~ r_eff,\n                      family = \"gaussian\",\n                      include = c(\"r_eff\"),\n                      control.family =  list(\n                        hyper = list(prec = list(initial = log(prec.u_c), \n                                                 param = prior.prec.u_c, \n                                                 fixed = FALSE))),\n            data  = data_classical)\n\nlik_imputation <- like(formula = zero ~ alpha_0 + alpha_z + r_eff,\n                       family = \"gaussian\",\n                       include = c(\"alpha_0\", \"alpha_z\",\"r_eff\"),\n                       control.family =   list(hyper = list(prec = list(initial = log(prec.r), \n                                                              param = prior.prec.r, \n                                                              fixed = FALSE))),\n             data = data_imputation)\n# Note: \n# formula = y ~ .,\n# formula = w ~ .,\n# formula = zero ~ .,\n# does exactly the same in this case.\n\n\nbru_options_set(bru_verbose = 1)\nfit <- bru(components = cmp_new,\n           lik_moi,\n           lik_berkson,\n           lik_classical,\n           lik_imputation,\n           options = list(verbose = F,\n                          bru_max_iter = 20,\n                          inla.mode  = \"experimental\"))\nfit$summary.fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               mean         sd 0.025quant  0.5quant 0.975quant mode\nIntercept 0.2407677 0.36072508 -0.4992460 0.2918836  0.7785278   NA\nbeta_z    0.5759891 0.66992138 -0.7961703 0.6593687  1.5296412   NA\nalpha_0   1.0141067 0.04488190  0.9260721 1.0141071  1.1021395   NA\nalpha_z   2.0081183 0.04498038  1.9198906 2.0081186  2.0963444   NA\n                   kld\nIntercept 1.127826e-05\nbeta_z    1.216473e-03\nalpha_0   7.991616e-12\nalpha_z   7.901787e-12\n```\n:::\n\n```{.r .cell-code}\nfit$summary.hyperpar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                mean         sd 0.025quant\nPrecision for the Gaussian observations    0.3285546 0.04577585 0.24543631\nPrecision for the Gaussian observations[2] 0.8509024 0.93672433 0.03318495\nPrecision for the Gaussian observations[3] 0.8214843 0.04444034 0.71424866\nPrecision for the Gaussian observations[4] 1.2827418 0.10257386 1.08469922\nBeta for x_eff_copy                        2.7653830 0.20215751 2.33799484\n                                            0.5quant 0.975quant mode\nPrecision for the Gaussian observations    0.3431020  0.4564513   NA\nPrecision for the Gaussian observations[2] 0.5416939  3.3771067   NA\nPrecision for the Gaussian observations[3] 0.8035361  0.9205185   NA\nPrecision for the Gaussian observations[4] 1.3172667  1.5578332   NA\nBeta for x_eff_copy                        2.8463195  3.2758863   NA\n```\n:::\n:::\n\n\n\n\n## First version -- using the `copy` option\nThis is a direct translation of the INLA code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1 = data.frame(y = data$y, z = data$z, weight = 1, r = 1:n)\ndata2 = data.frame(w = data$w, weight = 1, r = 1:n)\ndata3 = data.frame(zero = 0, z = data$z, weight = -1, r = 1:n)\n\n\ncmp = ~ Intercept(1, model = \"linear\", prec.linear = prior.beta[2]) +\n  beta_z(main = z, model = \"linear\", prec.linear = prior.beta[2]) +\n  u_b(main = r, model = \"iid\",  hyper = list(prec = list(initial = log(1), fixed=TRUE))) +\n  r_eff(r, weight, model = \"iid\",  hyper = list(prec = list(initial = -15, fixed=TRUE))) +\n  r_eff_copy(r, copy=\"r_eff\", \n             hyper = list(beta = list(param = prior.beta, fixed=FALSE))) +\n  alpha_0(main = 1, model = \"linear\", prec.linear = prior.alpha[2]) +\n  alpha_z(main = z, model = \"linear\", prec.linear = prior.alpha[2])\n\n\nlik1 = like(formula = y ~ Intercept + beta_z + u_b + r_eff_copy,\n            family = \"gaussian\",\n            include = c(\"Intercept\",\"beta_z\",\"u_b\",\"r_eff_copy\"),\n            control.family = list(hyper = list(prec = list(initial = log(prec.y), \n                                                           param = prior.prec.y, \n                                                           fixed = FALSE))),\n            data = data1)\n\nlik2 = like(formula = w ~ r_eff,\n            family = \"gaussian\",\n            include = c(\"r_eff\"),\n            control.family =  list(hyper = list(prec = list(initial = log(prec.u_c), \n                                                            param = prior.prec.u_c, \n                                                            fixed = TRUE))),\n            data  = data2)\n\nlik3  = like(formula = zero ~ alpha_0 + alpha_z + r_eff,\n             family = \"gaussian\",\n             include = c(\"alpha_0\", \"alpha_z\",\"r_eff\"),\n             control.family =   list(hyper = list(prec = list(initial = log(prec.x), \n                                                              param = prior.prec.x, \n                                                              fixed = FALSE))),\n             data = data3)\n# Note: \n# formula = y ~ .,\n# formula = w ~ .,\n# formula = zero ~ .,\n# does exactly the same in this case.\n\n\nbru_options_set(bru_verbose = 1)\nfit = bru(components = cmp,\n          lik1,\n          lik2,\n          lik3,\n          options = list(verbose = F,\n                         bru_max_iter = 20,\n                         inla.mode  = \"experimental\"))\nfit$summary.fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              mean        sd 0.025quant  0.5quant 0.975quant mode          kld\nIntercept 0.757722 0.1820924  0.3976366 0.7642335   1.093272   NA 6.523434e-07\nbeta_z    1.582514 0.3210952  0.9597011 1.6006610   2.155501   NA 5.690472e-06\nalpha_0   1.014106 0.0447009  0.9264207 1.0141062   1.101788   NA 1.111239e-12\nalpha_z   2.008119 0.0447990  1.9202417 2.0081194   2.095994   NA 1.106377e-12\n```\n:::\n\n```{.r .cell-code}\nfit$summary.hyperpar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                mean         sd 0.025quant\nPrecision for the Gaussian observations    0.3034131 0.03711778  0.2385541\nPrecision for the Gaussian observations[3] 1.0111750 0.09080516  0.8468101\nBeta for r_eff_copy                        2.1894841 0.15244351  1.8997118\n                                            0.5quant 0.975quant mode\nPrecision for the Gaussian observations    0.3005239  0.3845363   NA\nPrecision for the Gaussian observations[3] 1.0060682  1.2042685   NA\nBeta for r_eff_copy                        2.1854570  2.4999727   NA\n```\n:::\n:::\n\n\n## Second version -- no `copy` option \nThis takes advantage of special `inlabru` features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no copy -----------------------------------------------------------------\n\ncmp2 = ~ Intercept(1, model = \"linear\", prec.linear = prior.beta[2]) +\n  beta_z(main = z, model = \"linear\", prec.linear = prior.beta[2]) +\n  u_b(main = r, model = \"iid\",  hyper = list(prec = list(initial = log(1), fixed=TRUE))) +\n  r_eff(r, weight, model = \"iid\",  hyper = list(prec = list(initial = -15, fixed=TRUE))) +\n  #  r_eff_copy(r, copy=\"r_eff\", \n  #             hyper = list(beta = list(param = prior.beta, fixed=FALSE))) +\n  beta_u(main = 1, model = \"linear\", prec.linear = 0.001) +\n  alpha_0(main = 1, model = \"linear\", prec.linear = prior.alpha[2]) +\n  alpha_z(main = z, model = \"linear\", prec.linear = prior.alpha[2])\n\n\nlik1 = like(formula = y ~ Intercept + beta_z + u_b + beta_u * r_eff ,\n            family = \"gaussian\",\n            data = data1,\n            include = c(\"Intercept\",\"beta_z\",\"u_b\",\"beta_u\", \"r_eff\"),\n            control.family = list(hyper = list(prec = list(initial = log(prec.y), \n                                                           param = prior.prec.y, \n                                                           fixed = FALSE))))\n\nlik2 = like(formula = w ~ .,\n            family = \"gaussian\",\n            include = c(\"r_eff\"),\n            control.family =  list(hyper = list(prec = list(initial = log(prec.u_c), \n                                                            param = prior.prec.u_c, \n                                                            fixed = TRUE))),\n            data  = data2)\n\nlik3  = like(formula = zero ~ . ,\n             data = data3,\n             family = \"gaussian\",\n             include = c(\"alpha_0\", \"alpha_z\",\"r_eff\"),\n             control.family =   list(hyper = list(prec = list(initial = log(prec.x), \n                                                              param = prior.prec.x, \n                                                              fixed = FALSE))))\n\n\n\nbru_options_set(bru_verbose = 1)\nfit2 = bru(components = cmp2,\n           lik1,\n           lik2,\n           lik3,\n           options = list(verbose = F,\n                          bru_max_iter = 20,\n                          inla.mode  = \"experimental\"))\nfit2 = bru_rerun(fit2)\n\nfit2$summary.fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  mean          sd   0.025quant     0.5quant  0.975quant mode\nIntercept -188.6646921 10.48502148 -209.1143432 -188.7077509 -167.967360   NA\nbeta_z    -373.3217837 18.66387836 -409.6526295 -373.4263718 -336.384796   NA\nbeta_u     194.9821527  9.44929796  176.2570056  195.0420815  213.358597   NA\nalpha_0      0.9826028  0.03124674    0.9213232    0.9826027    1.043883   NA\nalpha_z      1.9447761  0.03142417    1.8831491    1.9447759    2.006404   NA\n                   kld\nIntercept 1.698115e-09\nbeta_z    3.230236e-09\nbeta_u    4.182658e-09\nalpha_0   5.520606e-11\nalpha_z   5.520277e-11\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}