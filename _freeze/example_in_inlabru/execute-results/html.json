{
  "hash": "b98e518975be606c1c819862e206a8e5",
  "result": {
    "markdown": "---\ntitle: \"Example in `inlabru`\"\nexecute: \n  freeze: true\nknitr:\n  opts_chunk: \n    message: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(INLA)\nlibrary(inlabru)\n```\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\nWe here show how to fit the measurement error and missing data model in `inlabru`. The `inlabru` code is written by Sara Martino, and commented by Emma Skarstein.\nTODO: the model is still using the random effect formulation and the exposure model uses x, this needs to be updated.\n\n## Loading the data\nFor this demonstration we will use the simulated data from the \"Simulation example\" vignette. Just to refresh: this is a situation where we have one covariate ($\\boldsymbol{x}$) that has both classical  error, Berkson error and missing data. We also observe another covariate ($\\boldsymbol{z}$) that has no error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"data/simulated_data.csv\")\nn <- nrow(data)\n```\n:::\n\n\n## Priors\nWe use the exact same priors as in the original simulation study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Priors for model of interest coefficients\nprior.beta = c(0, 1/1000) # N(0, 10^3)\n\n# Priors for exposure model coefficients\nprior.alpha <- c(0, 1/10000) # N(0, 10^4) \n\n# Priors for y, measurement error and true x-value precision\nprior.prec.y <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.u_b <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.u_c <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.x <- c(0.5, 0.5) # Gamma(0.5, 0.5) \n\n# Initial values\nprec.y <- 1\nprec.u_b <- 1\nprec.u_c <- 1\nprec.x <- 1\n```\n:::\n\n\n## First version -- using the `copy` option\nThis is a direct translation of the INLA code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1 = data.frame(y = data$y, z = data$z, weight = 1, r = 1:n)\ndata2 = data.frame(w = data$w, weight = 1, r = 1:n)\ndata3 = data.frame(zero = 0, z = data$z, weight = -1, r = 1:n)\n\n\ncmp = ~ Intercept(1, model = \"linear\", prec.linear = prior.beta[2]) +\n  beta_z(main = z, model = \"linear\", prec.linear = prior.beta[2]) +\n  u_b(main = r, model = \"iid\",  hyper = list(prec = list(initial = log(1), fixed=TRUE))) +\n  r_eff(r, weight, model = \"iid\",  hyper = list(prec = list(initial = -15, fixed=TRUE))) +\n  r_eff_copy(r, copy=\"r_eff\", \n             hyper = list(beta = list(param = prior.beta, fixed=FALSE))) +\n  alpha_0(main = 1, model = \"linear\", prec.linear = prior.alpha[2]) +\n  alpha_z(main = z, model = \"linear\", prec.linear = prior.alpha[2])\n\n\nlik1 = like(formula = y ~ Intercept + beta_z + u_b + r_eff_copy,\n            family = \"gaussian\",\n            include = c(\"Intercept\",\"beta_z\",\"u_b\",\"r_eff_copy\"),\n            control.family = list(hyper = list(prec = list(initial = log(prec.y), \n                                                           param = prior.prec.y, \n                                                           fixed = FALSE))),\n            data = data1)\n\nlik2 = like(formula = w ~ r_eff,\n            family = \"gaussian\",\n            include = c(\"r_eff\"),\n            control.family =  list(hyper = list(prec = list(initial = log(prec.u_c), \n                                                            param = prior.prec.u_c, \n                                                            fixed = TRUE))),\n            data  = data2)\n\nlik3  = like(formula = zero ~ alpha_0 + alpha_z + r_eff,\n             family = \"gaussian\",\n             include = c(\"alpha_0\", \"alpha_z\",\"r_eff\"),\n             control.family =   list(hyper = list(prec = list(initial = log(prec.x), \n                                                              param = prior.prec.x, \n                                                              fixed = FALSE))),\n             data = data3)\n# Note: \n# formula = y ~ .,\n# formula = w ~ .,\n# formula = zero ~ .,\n# does exactly the same in this case.\n\n\nbru_options_set(bru_verbose = 1)\nfit = bru(components = cmp,\n          lik1,\n          lik2,\n          lik3,\n          options = list(verbose = F,\n                         bru_max_iter = 20,\n                         inla.mode  = \"experimental\"))\nfit$summary.fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               mean         sd 0.025quant  0.5quant 0.975quant mode\nIntercept 1.0844538 0.06583119  0.9548932 1.0849422  1.2111409   NA\nbeta_z    0.9653624 0.05702401  0.8526197 0.9657400  1.0760255   NA\nalpha_0   1.0494502 0.05879469  0.9341947 1.0494236  1.1648569   NA\nalpha_z   0.6009887 0.05984758  0.4836213 0.6009785  0.7184136   NA\n                   kld\nIntercept 4.559748e-08\nbeta_z    5.565781e-09\nalpha_0   2.047453e-11\nalpha_z   3.339904e-12\n```\n:::\n:::\n\n\n## Second version -- no `copy` option \nThis takes advantage of special `inlabru` features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no copy -----------------------------------------------------------------\n\ncmp2 = ~ Intercept(1, model = \"linear\", prec.linear = prior.beta[2]) +\n  beta_z(main = z, model = \"linear\", prec.linear = prior.beta[2]) +\n  u_b(main = r, model = \"iid\",  hyper = list(prec = list(initial = log(1), fixed=TRUE))) +\n  r_eff(r, weight, model = \"iid\",  hyper = list(prec = list(initial = -15, fixed=TRUE))) +\n  #  r_eff_copy(r, copy=\"r_eff\", \n  #             hyper = list(beta = list(param = prior.beta, fixed=FALSE))) +\n  beta_u(main = 1, model = \"linear\", prec.linear = 0.001) +\n  alpha_0(main = 1, model = \"linear\", prec.linear = prior.alpha[2]) +\n  alpha_z(main = z, model = \"linear\", prec.linear = prior.alpha[2])\n\n\nlik1 = like(formula = y ~ Intercept + beta_z + u_b + beta_u * r_eff ,\n            family = \"gaussian\",\n            data = data1,\n            include = c(\"Intercept\",\"beta_z\",\"u_b\",\"beta_u\", \"r_eff\"),\n            control.family = list(hyper = list(prec = list(initial = log(prec.y), \n                                                           param = prior.prec.y, \n                                                           fixed = FALSE))))\n\nlik2 = like(formula = w ~ .,\n            family = \"gaussian\",\n            include = c(\"r_eff\"),\n            control.family =  list(hyper = list(prec = list(initial = log(prec.u_c), \n                                                            param = prior.prec.u_c, \n                                                            fixed = TRUE))),\n            data  = data2)\n\nlik3  = like(formula = zero ~ . ,\n             data = data3,\n             family = \"gaussian\",\n             include = c(\"alpha_0\", \"alpha_z\",\"r_eff\"),\n             control.family =   list(hyper = list(prec = list(initial = log(prec.x), \n                                                              param = prior.prec.x, \n                                                              fixed = FALSE))))\n\n\n\nbru_options_set(bru_verbose = 1)\nfit2 = bru(components = cmp2,\n           lik1,\n           lik2,\n           lik3,\n           options = list(verbose = F,\n                          bru_max_iter = 20,\n                          inla.mode  = \"experimental\"))\nfit2 = bru_rerun(fit2)\n\nfit2$summary.fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  mean          sd   0.025quant     0.5quant   0.975quant mode\nIntercept -173.7230890 15.34458444 -203.7110019 -173.7613665 -143.5176431   NA\nbeta_z    -100.0107127 10.23393791 -120.0355998 -100.0271972  -79.8922843   NA\nbeta_u     180.2829866 14.97522151  150.7717505  180.3313357  209.5190943   NA\nalpha_0      0.9753208  0.03486220    0.9069510    0.9753207    1.0436913   NA\nalpha_z      0.5633551  0.03550796    0.4937186    0.5633551    0.6329918   NA\n                   kld\nIntercept 6.360702e-10\nbeta_z    2.891200e-10\nbeta_u    1.044010e-09\nalpha_0   5.521966e-11\nalpha_z   5.529873e-11\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}