{
  "hash": "57e776661decee18cd6ca58bb310ed30",
  "result": {
    "markdown": "---\ntitle: \"Example in `inlabru`\"\nexecute: \n  freeze: true\nknitr:\n  opts_chunk: \n    message: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(INLA)\nlibrary(inlabru)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninla.setOption(num.threads = \"1:1\")\n```\n:::\n\n\nWe here show how to fit the measurement error and missing data model in `inlabru`. The `inlabru` code is written by Sara Martino, and commented by Emma Skarstein.\n\n\n## Loading the data\nFor this demonstration we will use the simulated data from the [Simulation example](simulation_example.qmd). Just to refresh: this is a situation where we have one covariate ($\\boldsymbol{x}$) that has both classical  error, Berkson error and missing data. We also observe another covariate ($\\boldsymbol{z}$) that has no error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"data/simulated_data.csv\")\nn <- nrow(data)\n```\n:::\n\n\n## Priors\nWe use the exact same priors as in the original simulation study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Priors for model of interest coefficients\nprior.beta = c(0, 1/1000) # N(0, 10^3)\n\n# Priors for exposure model coefficients\nprior.alpha <- c(0, 1/10000) # N(0, 10^4) \n\n# Priors for y, measurement error and true x-value precision\nprior.prec.y <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.u_b <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.u_c <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.r <- c(0.5, 0.5) # Gamma(0.5, 0.5) \nprior.prec.x <- c(0.5, 0.5)\n\n\n# Initial values\nprec.y <- 1\nprec.u_b <- 1\nprec.u_c <- 1\nprec.r <- 1\nprec.x <- 1\n```\n:::\n\n\n## Specifying the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Regression model of interest \ndata_moi <- data.frame(y = data$y, z = data$z, weight.x = 1, weight.r = 1, r = 1:n) \n\n# Berkson ME model\ndata_berkson <- data.frame(zero = 0, weight.x = -1, weight.r = 1, r = 1:n) \n\n# Classical ME model\ndata_classical <- data.frame(w = data$w, weight.x = 1, weight.r = 1, r = 1:n)\n\n# Imputation model\ndata_imputation <- data.frame(zero = 0, z = data$z, weight.x = 1, weight.r = -1, r = 1:n)\n```\n:::\n\n\n## Formulas\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncmp_new <- ~ Intercept(1, model = \"linear\", prec.linear = prior.beta[2]) +\n  beta_z(main = z, model = \"linear\", prec.linear = prior.beta[2]) +\n  x_eff(r, weight.x, model = \"iid\",  hyper = list(prec = list(initial = -15, fixed=TRUE))) +\n  x_eff_copy(r, copy=\"x_eff\", hyper = list(beta = list(param = prior.beta, fixed=FALSE))) +\n  r_eff(r, weight.r, model = \"iid\",  hyper = list(prec = list(initial = -15, fixed=TRUE))) +\n  alpha_0(main = 1, model = \"linear\", prec.linear = prior.alpha[2]) +\n  alpha_z(main = z, model = \"linear\", prec.linear = prior.alpha[2])\n\n\nlik_moi <- like(formula = y ~ .,\n                family = \"gaussian\",\n                include = c(\"Intercept\", \"beta_z\", \"x_eff_copy\"),\n                control.family = list(\n                  hyper = list(prec = list(initial = log(prec.y), \n                                           param = prior.prec.y, \n                                           fixed = FALSE))),\n            data = data_moi)\n\nlik_berkson <- like(formula = zero ~ .,\n                    family = \"gaussian\",\n                    include = c(\"x_eff\", \"r_eff\"),\n                    control.family = list(\n                      hyper = list(prec = list(initial = log(prec.u_b),\n                                               param = prior.prec.u_b,\n                                               fixed = FALSE))),\n                    data = data_berkson)\n\nlik_classical <- like(formula = w ~ .,\n                      family = \"gaussian\",\n                      include = c(\"r_eff\"),\n                      control.family =  list(\n                        hyper = list(prec = list(initial = log(prec.u_c), \n                                                 param = prior.prec.u_c, \n                                                 fixed = FALSE))),\n            data  = data_classical)\n\nlik_imputation <- like(formula = zero ~ .,\n                       family = \"gaussian\",\n                       include = c(\"alpha_0\", \"alpha_z\",\"r_eff\"),\n                       control.family =   list(\n                         hyper = list(prec = list(initial = log(prec.r), \n                                                  param = prior.prec.r, \n                                                  fixed = FALSE))),\n             data = data_imputation)\n```\n:::\n\n\n## Fitting the model\n\n::: {.cell}\n\n```{.r .cell-code}\nbru_options_set(bru_verbose = 1)\nfit <- bru(components = cmp_new,\n           lik_moi,\n           lik_berkson,\n           lik_classical,\n           lik_imputation,\n           options = list(verbose = F,\n                          bru_max_iter = 20,\n                          inla.mode  = \"experimental\"))\nfit$summary.fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              mean         sd 0.025quant 0.5quant 0.975quant mode          kld\nIntercept 1.000871 0.17477625  0.6171142 1.023330   1.291305   NA 1.219935e-06\nbeta_z    2.070481 0.30233865  1.4000095 2.132443   2.520561   NA 8.593488e-06\nalpha_0   1.005297 0.04730354  0.9125180 1.005296   1.098081   NA 1.257765e-11\nalpha_z   1.987651 0.04889942  1.8917480 1.987648   2.083571   NA 1.323263e-11\n```\n:::\n\n```{.r .cell-code}\nfit$summary.hyperpar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                mean         sd 0.025quant\nPrecision for the Gaussian observations    1.3215370 0.12891126  1.1204920\nPrecision for the Gaussian observations[2] 0.9835689 0.11150074  0.7666513\nPrecision for the Gaussian observations[3] 1.1465015 0.07147174  0.9476022\nPrecision for the Gaussian observations[4] 0.9761411 0.04944324  0.9398728\nBeta for x_eff_copy                        1.9862676 0.09205144  1.9235916\n                                           0.5quant 0.975quant mode\nPrecision for the Gaussian observations    1.511967   1.896480   NA\nPrecision for the Gaussian observations[2] 1.260254   1.480340   NA\nPrecision for the Gaussian observations[3] 1.049763   1.197601   NA\nPrecision for the Gaussian observations[4] 1.042509   1.129890   NA\nBeta for x_eff_copy                        2.113436   2.261097   NA\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}