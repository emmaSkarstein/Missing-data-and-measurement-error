{
  "hash": "c5d666a40fe879344c77eacb6db3da97",
  "result": {
    "markdown": "---\ntitle: \"Example in `inlabru`\"\nexecute: \n  freeze: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(INLA)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Matrix\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: foreach\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: parallel\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sp\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is INLA_22.05.03 built 2022-05-03 08:04:26 UTC.\n - See www.r-inla.org/contact-us for how to get help.\n - To enable PARDISO sparse library; see inla.pardiso()\n```\n:::\n\n```{.r .cell-code}\nlibrary(inlabru)\n```\n:::\n\nWe here show how to fit the measurement error and missing data model in `inlabru`. The `inlabru` code is written by Sara Martino, and commented by Emma Skarstein.\n\n# Loading the data\nFor this demonstration we will use the simulated data from the \"Simulation example\" vignette. Just to refresh: this is a situation where we have one covariate ($\\boldsymbol{x}$) that has both classical  error, Berkson error and missing data. We also observe another covariate ($\\boldsymbol{z}$) that has no error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"data/simulated_data.csv\")\nn <- nrow(data)\n```\n:::\n\n\n# Priors\nWe use the exact same priors as in the original simulation study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Priors for model of interest coefficients\nprior.beta = c(0, 1/1000) # N(0, 10^3)\n\n# Priors for exposure model coefficients\nprior.alpha <- c(0, 1/10000) # N(0, 10^4) \n\n# Priors for y, measurement error and true x-value precision\nprior.prec.y <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.u_b <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.u_c <- c(0.5, 0.5) # Gamma(0.5, 0.5)\nprior.prec.x <- c(0.5, 0.5) # Gamma(0.5, 0.5) \n\n# Initial values\nprec.y <- 1\nprec.u_b <- 1\nprec.u_c <- 1\nprec.x <- 1\n```\n:::\n\n\n# First version -- using the `copy` option\nThis is a direct translation of the INLA code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1 = data.frame(y = data$y, z = data$z, weight = 1, r = 1:n)\ndata2 = data.frame(w = data$w,  weight = 1, r = 1:n)\ndata3 = data.frame(zero = 0, z = data$z,  weight = -1, r = 1:n)\n\n\ncmp = ~ Intercept(1, model = \"linear\", prec.linear = prior.beta[2]) +\n  beta_z(main = z, model = \"linear\", prec.linear = prior.beta[2]) +\n  u_b(main = r, model = \"iid\",  hyper = list(prec = list(initial = log(1), fixed=TRUE))) +\n  r_eff(r, weight, model = \"iid\",  hyper = list(prec = list(initial = -15, fixed=TRUE))) +\n  r_eff_copy(r, copy=\"r_eff\", \n             hyper = list(beta = list(param = prior.beta, fixed=FALSE))) +\n  alpha_0(main = 1, model = \"linear\", prec.linear = prior.alpha[2]) +\n  alpha_z(main = z, model = \"linear\", prec.linear = prior.alpha[2])\n\n\nlik1 = like(formula = y ~ Intercept + beta_z + u_b + r_eff_copy,\n            family = \"gaussian\",\n            include = c(\"Intercept\",\"beta_z\",\"u_b\",\"r_eff_copy\"),\n            control.family = list(hyper = list(prec = list(initial = log(prec.y), \n                                                           param = prior.prec.y, \n                                                           fixed = FALSE))),\n            data = data1)\n\nlik2 = like(formula = w ~ r_eff,\n            family = \"gaussian\",\n            include = c(\"r_eff\"),\n            control.family =  list(hyper = list(prec = list(initial = log(prec.u_c), \n                                                            param = prior.prec.u_c, \n                                                            fixed = TRUE))),\n            data  = data2)\n\nlik3  = like(formula = zero ~ alpha_0 + alpha_z + r_eff,\n             family = \"gaussian\",\n             include = c(\"alpha_0\", \"alpha_z\",\"r_eff\"),\n             control.family =   list(hyper = list(prec = list(initial = log(prec.x), \n                                                              param = prior.prec.x, \n                                                              fixed = FALSE))),\n             data = data3)\n# Note: \n# formula = y ~ .,\n# formula = w ~ .,\n# formula = zero ~ .,\n# does exactly the same.\n\n\nbru_options_set(bru_verbose = 1)\nfit = bru(components = cmp,\n          lik1,\n          lik2,\n          lik3,\n          options = list(verbose = F,\n                         bru_max_iter = 20,\n                         inla.mode  = \"experimental\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 1 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 2 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 154% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 3 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 158% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 4 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 156% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 5 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 158% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 6 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 156% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 7 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 157% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 8 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 154% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 9 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 155% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 10 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 153% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 11 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 154% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 12 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 154% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 13 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 155% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 14 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 151% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 15 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 152% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 16 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 150% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 17 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 151% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 18 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 150% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 19 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 145% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Maximum iterations reached, running final INLA integration.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 20 [max:20]\n```\n:::\n\n```{.r .cell-code}\nfit$summary.fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               mean         sd 0.025quant  0.5quant 0.975quant mode\nIntercept 1.0833013 0.06574591  0.9537734 1.0838473  1.2097886   NA\nbeta_z    0.9647166 0.05696265  0.8520621 0.9651042  1.0752416   NA\nalpha_0   1.0495269 0.05879511  0.9342711 1.0495000  1.1649354   NA\nalpha_z   0.6010181 0.05984694  0.4836521 0.6010078  0.7184423   NA\n                   kld\nIntercept 4.535895e-08\nbeta_z    5.684490e-09\nalpha_0   2.087570e-11\nalpha_z   3.332226e-12\n```\n:::\n:::\n\n\n# Second version -- no `copy` option \nThis takes advantage of special `inlabru` features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no copy -----------------------------------------------------------------\n\ncmp2 = ~ Intercept(1, model = \"linear\", prec.linear = prior.beta[2]) +\n  beta_z(main = z, model = \"linear\", prec.linear = prior.beta[2]) +\n  u_b(main = r, model = \"iid\",  hyper = list(prec = list(initial = log(1), fixed=TRUE))) +\n  r_eff(r, weight, model = \"iid\",  hyper = list(prec = list(initial = -15, fixed=TRUE))) +\n  #  r_eff_copy(r, copy=\"r_eff\", \n  #             hyper = list(beta = list(param = prior.beta, fixed=FALSE))) +\n  beta_u(main = 1, model = \"linear\", prec.linear = 0.001) +\n  alpha_0(main = 1, model = \"linear\", prec.linear = prior.alpha[2]) +\n  alpha_z(main = z, model = \"linear\", prec.linear = prior.alpha[2])\n\n\nlik1 = like(formula = y ~ Intercept + beta_z + u_b + beta_u * r_eff ,\n            family = \"gaussian\",\n            data = data1,\n            include = c(\"Intercept\",\"beta_z\",\"u_b\",\"beta_u\", \"r_eff\"),\n            control.family = list(hyper = list(prec = list(initial = log(prec.y), \n                                                           param = prior.prec.y, \n                                                           fixed = FALSE))))\n\nlik2 = like(formula = w ~ .,\n            family = \"gaussian\",\n            include = c(\"r_eff\"),\n            control.family =  list(hyper = list(prec = list(initial = log(prec.u_c), \n                                                            param = prior.prec.u_c, \n                                                            fixed = TRUE))),\n            data  = data2)\n\nlik3  = like(formula = zero ~ . ,\n             data = data3,\n             family = \"gaussian\",\n             include = c(\"alpha_0\", \"alpha_z\",\"r_eff\"),\n             control.family =   list(hyper = list(prec = list(initial = log(prec.x), \n                                                              param = prior.prec.x, \n                                                              fixed = FALSE))))\n\n\n\nbru_options_set(bru_verbose = 1)\nfit2 = bru(components = cmp2,\n           lik1,\n           lik2,\n           lik3,\n           options = list(verbose = F,\n                          bru_max_iter = 20,\n                          inla.mode  = \"experimental\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 1 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 2 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 2300% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 3 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 580% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 4 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 3980% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 5 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 3360% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 6 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 3520% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 7 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 2970% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 8 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 2680% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 9 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 2560% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 10 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 2350% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 11 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 2000% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 12 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 1540% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 13 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 986% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 14 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 295% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 15 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 103% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 16 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 91.6% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 17 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 46.4% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 18 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 54.3% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 19 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 35.7% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Maximum iterations reached, running final INLA integration.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 20 [max:20]\n```\n:::\n\n```{.r .cell-code}\nfit2 = bru_rerun(fit2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 1 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 2 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 73.2% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 3 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 113% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 4 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 85.9% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 5 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 14.5% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 6 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 22.1% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 7 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 9.56% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 8 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 22.9% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 9 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 18.8% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 10 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 16.4% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 11 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 21.5% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 12 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 70.9% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 13 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 124% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 14 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 99% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 15 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 42.3% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 16 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 33% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 17 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 24.4% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 18 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 8.55% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 19 [max:20]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Max deviation from previous: 21.3% of SD [stop if: <1%]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Maximum iterations reached, running final INLA integration.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\niinla: Iteration 20 [max:20]\n```\n:::\n\n```{.r .cell-code}\nfit2$summary.fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  mean          sd   0.025quant     0.5quant   0.975quant mode\nIntercept -171.6129153 15.50757943 -201.9385182 -171.6443755 -141.1082990   NA\nbeta_z     -98.7917362 10.34318515 -119.0387045  -98.8052890  -78.4677928   NA\nbeta_u     178.1225745 15.16896988  148.2571723  178.1623897  207.7610651   NA\nalpha_0      0.9753461  0.03485346    0.9069934    0.9753460    1.0436994   NA\nalpha_z      0.5633709  0.03549413    0.4937615    0.5633708    0.6329804   NA\n                   kld\nIntercept 4.409125e-10\nbeta_z    2.104046e-10\nbeta_u    7.122753e-10\nalpha_0   5.522452e-11\nalpha_z   5.527574e-11\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}